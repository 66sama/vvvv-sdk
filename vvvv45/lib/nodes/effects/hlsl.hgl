<UniHighlighter>
 <ImportantInfo>
  ******* Please read carefully *************************
  * Please, make any changes in this file very carefuly!*
  * It is much more convinient to use native designer!  *
  *******************************************************
 </ImportantInfo>
 <Info>
  <General>
   <Name>HLSL</Name>
   <FileTypeName>FX</FileTypeName>
   <Layout>Standard</Layout>
  </General>
  <Author>
   <Name></Name>
   <Email></Email>
   <Web></Web>
   <Copyright></Copyright>
   <Company></Company>
   <Remark></Remark>
  </Author>
  <Version>
   <Version>1</Version>
   <Revision>0</Revision>
   <Date>38128,856315787</Date>
   <Type>Release</Type>
  </Version>
  <History>
  </History>
  <Sample>
  </Sample>
 </Info>
 <Range Name="Root">
 <Def>
  <Back>15198183</Back>
  <Fore>0</Fore>
  <Style></Style>
 </Def>
 <Num>
  <Back>15198183</Back>
  <Fore>16711680</Fore>
  <Style></Style>
 </Num>
 <OpenSymbol></OpenSymbol>
 <CloseSymbol></CloseSymbol>
 <DelimiterChars>!&qt;$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^{|}~</DelimiterChars>
 <AnyTerm>True</AnyTerm>
 <CloseOnTerm>False</CloseOnTerm>
 <CloseOnEol>False</CloseOnEol>
 <CaseSensitive>False</CaseSensitive>
 <KW Name="Types">
  <Attri>
   <Back>15198183</Back>
   <Fore>42496</Fore>
   <Style></Style>
  </Attri>
  <W>bool</W>
  <W>bool1</W>
  <W>bool2</W>
  <W>bool3</W>
  <W>bool4</W>
  <W>bool3x3</W>
  <W>bool4x4</W>
  <W>double</W>
  <W>double1</W>
  <W>double2</W>
  <W>double3</W>
  <W>double4</W>
  <W>double3x3</W>
  <W>double4x4</W>
  <W>float</W>
  <W>float1</W>
  <W>float2</W>
  <W>float3</W>
  <W>float4</W>
  <W>float3x3</W>
  <W>float4x4</W>
  <W>half</W>
  <W>half1</W>
  <W>half2</W>
  <W>half3</W>
  <W>half4</W>
  <W>half3x3</W>
  <W>half4x4</W>
  <W>int</W>
  <W>int1</W>
  <W>int2</W>
  <W>int3</W>
  <W>int4</W>
  <W>int3x3</W>
  <W>int4x4</W>
  <W>string</W>
  <W>vector</W>
  <W>matrix</W>
  <W>texture</W>
  <W>sampler</W>
  <W>sampler1D</W>
  <W>sampler2D</W>
  <W>sampler3D</W>
 </KW>
 <KW Name="Keywords">
  <Attri>
   <Back>15198183</Back>
   <Fore>0</Fore>
   <Style>B</Style>
  </Attri>
  <W>asm</W>
  <W>compile</W>
  <W>const</W>
  <W>decl</W>
  <W>do</W>
  <W>else</W>
  <W>extern</W>
  <W>false</W>
  <W>for</W>
  <W>if</W>
  <W>in</W>
  <W>inline</W>
  <W>inout</W>
  <W>out</W>
  <W>pass</W>
  <W>pixelshader</W>
  <W>register</W>
  <W>return</W>
  <W>shared</W>
  <W>static</W>
  <W>struct</W>
  <W>technique</W>
  <W>true</W>
  <W>typedef</W>
  <W>uniform</W>
  <W>vertexshader</W>
  <W>void</W>
  <W>volatile</W>
  <W>while</W>
  <W>compile</W>
 </KW>
 <KW Name="Intrinsic">
  <Attri>
   <Back>15198183</Back>
   <Fore>8192000</Fore>
   <Style></Style>
  </Attri>
  <W>abs</W>
  <W>acos</W>
  <W>all</W>
  <W>any</W>
  <W>asic</W>
  <W>atan</W>
  <W>atan2</W>
  <W>BYTE4</W>
  <W>ceil</W>
  <W>clamp</W>
  <W>clip</W>
  <W>cos</W>
  <W>cosh&qt;</W>
  <W>cross</W>
  <W>D3DCOLORtoU</W>
  <W>ddx</W>
  <W>ddy</W>
  <W>degrees</W>
  <W>determinanr</W>
  <W>distance</W>
  <W>dot</W>
  <W>exp</W>
  <W>exp2</W>
  <W>faceforward</W>
  <W>floor</W>
  <W>fmod</W>
  <W>frac</W>
  <W>frc</W>
  <W>frexp</W>
  <W>fwidth</W>
  <W>isfinite</W>
  <W>isinf</W>
  <W>isnan</W>
  <W>len</W>
  <W>length</W>
  <W>lerp</W>
  <W>lit</W>
  <W>log</W>
  <W>log10</W>
  <W>log2</W>
  <W>lpexp</W>
  <W>max</W>
  <W>min</W>
  <W>modf</W>
  <W>mul</W>
  <W>noise</W>
  <W>normalize</W>
  <W>pow</W>
  <W>radians</W>
  <W>reflect</W>
  <W>refract</W>
  <W>round</W>
  <W>rsqrt</W>
  <W>saturate</W>
  <W>sign</W>
  <W>sin</W>
  <W>sincos</W>
  <W>sinh</W>
  <W>smoothstep</W>
  <W>sqrt</W>
  <W>step</W>
  <W>tan</W>
  <W>tanh</W>
  <W>tex1D</W>
  <W>tex1Dbias</W>
  <W>tex1Dproj</W>
  <W>tex2D</W>
  <W>tex2Dbias</W>
  <W>tex2Dproj</W>
  <W>tex3D</W>
  <W>tex3Dbias</W>
  <W>tex3Dproj</W>
  <W>texCUBE</W>
  <W>texCUBEbias</W>
  <W>texCUBEproj</W>
  <W>transpose</W>
 </KW>
 <KW Name="Semantics">
  <Attri>
   <Back>15198183</Back>
   <Fore>16711680</Fore>
   <Style></Style>
  </Attri>
  <W>binormal</W>
  <W>binormal0</W>
  <W>binormal1</W>
  <W>binormal2</W>
  <W>binormal3</W>
  <W>binormal4</W>
  <W>binormal5</W>
  <W>binormal6</W>
  <W>binormal7</W>
  <W>binormal8</W>
  <W>binormal9</W>
  <W>binormal10</W>
  <W>binormal11</W>
  <W>binormal12</W>
  <W>binormal13</W>
  <W>binormal14</W>
  <W>binormal15</W>
  <W>blendindices</W>
  <W>blendindices0</W>
  <W>blendindices1</W>
  <W>blendindices2</W>
  <W>blendindices3</W>
  <W>blendindices4</W>
  <W>blendindices5</W>
  <W>blendindices6</W>
  <W>blendindices7</W>
  <W>blendindices8</W>
  <W>blendindices9</W>
  <W>blendindices10</W>
  <W>blendindices11</W>
  <W>blendindices12</W>
  <W>blendindices13</W>
  <W>blendindices14</W>
  <W>blendindices15</W>
  <W>blendweight</W>
  <W>blendweight0</W>
  <W>blendweight1</W>
  <W>blendweight2</W>
  <W>blendweight3</W>
  <W>blendweight4</W>
  <W>blendweight5</W>
  <W>blendweight6</W>
  <W>blendweight7</W>
  <W>blendweight8</W>
  <W>blendweight9</W>
  <W>blendweight10</W>
  <W>blendweight11</W>
  <W>blendweight12</W>
  <W>blendweight13</W>
  <W>blendweight14</W>
  <W>color</W>
  <W>color0</W>
  <W>color1</W>
  <W>color2</W>
  <W>color3</W>
  <W>color4</W>
  <W>color5</W>
  <W>color6</W>
  <W>color7</W>
  <W>color8</W>
  <W>color9</W>
  <W>color10</W>
  <W>color11</W>
  <W>color12</W>
  <W>color13</W>
  <W>color14</W>
  <W>color15</W>
  <W>diffuse0</W>
  <W>diffuse1</W>
  <W>diffuse2</W>
  <W>diffuse3</W>
  <W>diffuse4</W>
  <W>diffuse5</W>
  <W>diffuse6</W>
  <W>diffuse7</W>
  <W>diffuse8</W>
  <W>diffuse9</W>
  <W>diffuse10</W>
  <W>diffuse11</W>
  <W>diffuse12</W>
  <W>diffuse13</W>
  <W>diffuse14</W>
  <W>diffuse15</W>
  <W>fog</W>
  <W>fog0</W>
  <W>fog1</W>
  <W>fog2</W>
  <W>fog3</W>
  <W>fog4</W>
  <W>fog5</W>
  <W>fog6</W>
  <W>fog7</W>
  <W>fog8</W>
  <W>fog9</W>
  <W>fog10</W>
  <W>fog11</W>
  <W>fog12</W>
  <W>fog13</W>
  <W>fog14</W>
  <W>fog15</W>
  <W>normal</W>
  <W>normal0</W>
  <W>normal1</W>
  <W>normal2</W>
  <W>normal3</W>
  <W>normal4</W>
  <W>normal5</W>
  <W>normal6</W>
  <W>normal7</W>
  <W>normal8</W>
  <W>normal9</W>
  <W>normal10</W>
  <W>normal11</W>
  <W>normal12</W>
  <W>normal13</W>
  <W>normal14</W>
  <W>normal15</W>
  <W>position</W>
  <W>position0</W>
  <W>position1</W>
  <W>position2</W>
  <W>position3</W>
  <W>position4</W>
  <W>position5</W>
  <W>position6</W>
  <W>position7</W>
  <W>position8</W>
  <W>position9</W>
  <W>position10</W>
  <W>position11</W>
  <W>position12</W>
  <W>position13</W>
  <W>position14</W>
  <W>position15</W>
  <W>psize</W>
  <W>psize0</W>
  <W>psize1</W>
  <W>psize2</W>
  <W>psize3</W>
  <W>psize4</W>
  <W>psize5</W>
  <W>psize6</W>
  <W>psize7</W>
  <W>psize8</W>
  <W>psize9</W>
  <W>psize10</W>
  <W>psize11</W>
  <W>psize12</W>
  <W>psize13</W>
  <W>psize14</W>
  <W>tangent</W>
  <W>tangent0</W>
  <W>tangent1</W>
  <W>tangent2</W>
  <W>tangent3</W>
  <W>tangent4</W>
  <W>tangent5</W>
  <W>tangent6</W>
  <W>tangent7</W>
  <W>tangent8</W>
  <W>tangent9</W>
  <W>tangent10</W>
  <W>tangent11</W>
  <W>tangent12</W>
  <W>tangent13</W>
  <W>tangent14</W>
  <W>tangent15</W>
  <W>tessfactor</W>
  <W>tessfactor0</W>
  <W>tessfactor1</W>
  <W>tessfactor2</W>
  <W>tessfactor3</W>
  <W>tessfactor4</W>
  <W>tessfactor5</W>
  <W>tessfactor6</W>
  <W>tessfactor7</W>
  <W>tessfactor8</W>
  <W>tessfactor9</W>
  <W>tessfactor10</W>
  <W>tessfactor11</W>
  <W>tessfactor12</W>
  <W>tessfactor13</W>
  <W>tessfactor14</W>
  <W>tessfactor15</W>
  <W>texcoord</W>
  <W>texcoord0</W>
  <W>texcoord1</W>
  <W>texcoord2</W>
  <W>texcoord3</W>
  <W>texcoord4</W>
  <W>texcoord5</W>
  <W>texcoord6</W>
  <W>texcoord7</W>
  <W>texcoord8</W>
  <W>texcoord9</W>
  <W>texcoord10</W>
  <W>texcoord11</W>
  <W>texcoord12</W>
  <W>texcoord13</W>
  <W>texcoord14</W>
  <W>texcoord15</W>
  <W>world</W>
  <W>worldinverse</W>
  <W>worldinversetranspose</W>
  <W>worldview</W>
  <W>worldviewinverse</W>
  <W>worldviewinversetranspose</W>
  <W>worldviewprojection</W>
  <W>worldviewprojectioninverse</W>
  <W>worldviewprojectioninversetranspose</W>
  <W>view</W>
  <W>viewprojection</W>
  <W>viewinverse</W>
  <W>viewinversetranspose</W>
  <W>viewprojectioninverse</W>
  <W>viewprojectioninversetranspose</W>
  <W>projection</W>
  <W>projectioninverse</W>
  <W>worldviewtranspose</W>
  <W>viewprojectiontranspose</W>
  <W>worldtranspose</W>
  <W>viewtranpose</W>
  <W>cameraposition</W>
  <W>viewportindex</W>
  <W>viewportcount</W>
  <W>texturematrix</W>

 </KW>
 <KW Name="Punctuators">
  <Attri>
   <Back>15198183</Back>
   <Fore>0</Fore>
   <Style>B</Style>
  </Attri>
  <W>{</W>
  <W>}</W>
  <W>;</W>
  <W>(</W>
  <W>)</W>
  <W>,</W>
 </KW>
  <Range Name="Remarks //">
  <Def>
   <Back>15198183</Back>
   <Fore>8421504</Fore>
   <Style></Style>
  </Def>
  <Num>
   <Back>15198183</Back>
   <Fore>8421504</Fore>
   <Style></Style>
  </Num>
  <OpenSymbol>//</OpenSymbol>
  <CloseSymbol></CloseSymbol>
  <DelimiterChars>!&qt;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^`{|}~</DelimiterChars>
  <AnyTerm>True</AnyTerm>
  <CloseOnTerm>False</CloseOnTerm>
  <CloseOnEol>True</CloseOnEol>
  <CaseSensitive>False</CaseSensitive>
  </Range>
  <Range Name="Remarks /*..*/">
  <Def>
   <Back>15198183</Back>
   <Fore>8421504</Fore>
   <Style></Style>
  </Def>
  <Num>
   <Back>15132390</Back>
   <Fore>8421504</Fore>
   <Style></Style>
  </Num>
  <OpenSymbol>/*</OpenSymbol>
  <CloseSymbol>*/</CloseSymbol>
  <DelimiterChars>!&qt;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^`{|}~</DelimiterChars>
  <AnyTerm>True</AnyTerm>
  <CloseOnTerm>False</CloseOnTerm>
  <CloseOnEol>False</CloseOnEol>
  <CaseSensitive>False</CaseSensitive>
  </Range>
  <Range Name="Strings &qt;..&qt;">
  <Def>
   <Back>15198183</Back>
   <Fore>5197647</Fore>
   <Style></Style>
  </Def>
  <Num>
   <Back>15198183</Back>
   <Fore>5197647</Fore>
   <Style></Style>
  </Num>
  <OpenSymbol>&qt;</OpenSymbol>
  <CloseSymbol>&qt;</CloseSymbol>
  <DelimiterChars>!&qt;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^`{|}~</DelimiterChars>
  <AnyTerm>True</AnyTerm>
  <CloseOnTerm>False</CloseOnTerm>
  <CloseOnEol>False</CloseOnEol>
  <CaseSensitive>False</CaseSensitive>
  </Range>
  <Range Name="Strings '..'">
  <Def>
   <Back>15198183</Back>
   <Fore>5197647</Fore>
   <Style></Style>
  </Def>
  <Num>
   <Back>15198183</Back>
   <Fore>5197647</Fore>
   <Style></Style>
  </Num>
  <OpenSymbol>'</OpenSymbol>
  <CloseSymbol>'</CloseSymbol>
  <DelimiterChars>!&qt;#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^`{|}~</DelimiterChars>
  <AnyTerm>True</AnyTerm>
  <CloseOnTerm>False</CloseOnTerm>
  <CloseOnEol>False</CloseOnEol>
  <CaseSensitive>False</CaseSensitive>
  </Range>
 </Range>
 <CopyRight>Rule file for UniHighlighter Delphi component (Copyright(C) Fantasist(walking_in_the_sky@yahoo.com), Vit(nevzorov@yahoo.com), 2002)</CopyRight>
<FUNCTIONREFERENCE><FUNCTION><CELL>abs</CELL><CELL>value abs(value a)</CELL><CELL>Absolute value	(per component).</CELL></FUNCTION><FUNCTION><CELL>acos</CELL><CELL>acos(x)</CELL><CELL>Returns the arccosine of each component of x.  Each component should be in the range [-1, 1].</CELL></FUNCTION><FUNCTION><CELL>all</CELL><CELL>all(x)</CELL><CELL>Test if all components of x are nonzero.</CELL></FUNCTION><FUNCTION><CELL>any</CELL><CELL>any(x)</CELL><CELL>Test is any component of x is nonzero.</CELL></FUNCTION><FUNCTION><CELL>asin</CELL><CELL>asin(x)</CELL><CELL>Returns the arcsine of each component of x.  Each component should be in the range [-pi/2, pi/2].</CELL></FUNCTION><FUNCTION><CELL>atan</CELL><CELL>atan(x)</CELL><CELL>Returns the arctangent of x.  The return values are in the range [-pi/2, pi/2].</CELL></FUNCTION><FUNCTION><CELL>atan2</CELL><CELL>atan2(y, x)</CELL><CELL>Returns the arctangent of y/x. The signs of y and x are used to determine the quadrant of the return values in the range [-pi, pi]. atan2 is well-defined for every point other than the origin, even if x equals 0 and y does not equal 0.</CELL></FUNCTION><FUNCTION><CELL>ceil</CELL><CELL>ceil(x)</CELL><CELL>Returns the smallest integer which is greater than or equal to x.</CELL></FUNCTION><FUNCTION><CELL>clamp</CELL><CELL>clamp(x, min, max)</CELL><CELL>Clamps x to the range [min, max].</CELL></FUNCTION><FUNCTION><CELL>clip</CELL><CELL>clip(x)</CELL><CELL>Discards the current pixel, if any component of x is less than zero. This can be used to simulate clip planes, if each component of x represents the distance from a plane.</CELL></FUNCTION><FUNCTION><CELL>cos</CELL><CELL>cos(x)</CELL><CELL>Returns the cosine of x.</CELL></FUNCTION><FUNCTION><CELL>cosh</CELL><CELL>cosh(x)</CELL><CELL>Returns the hyperbolic cosine of x.</CELL></FUNCTION><FUNCTION><CELL>cross</CELL><CELL>cross(a, b)</CELL><CELL>Returns the cross product of two 3-D vectors a and b.</CELL></FUNCTION><FUNCTION><CELL>D3DCOLORtoUBYTE4</CELL><CELL>D3DCOLORtoUBYTE4(x)</CELL><CELL>Swizzles and scales components of the 4-D vector x to compensate for the lack of UBYTE4 support in some hardware.</CELL></FUNCTION><FUNCTION><CELL>ddx</CELL><CELL>ddx(x)</CELL><CELL>Returns the partial derivative of x with respect to the screen-space x-coordinate.</CELL></FUNCTION><FUNCTION><CELL>ddy</CELL><CELL>ddy(x)</CELL><CELL>Returns the partial derivative of x with respect to the screen-space y-coordinate.</CELL></FUNCTION><FUNCTION><CELL>degrees</CELL><CELL>degrees(x)</CELL><CELL>Converts x from radians to degrees.</CELL></FUNCTION><FUNCTION><CELL>determinant</CELL><CELL>determinant(m)</CELL><CELL>Returns the determinant of the square matrix m.</CELL></FUNCTION><FUNCTION><CELL>distance</CELL><CELL>distance(a, b)</CELL><CELL>Returns the distance between two points a and b.</CELL></FUNCTION><FUNCTION><CELL>dot</CELL><CELL>dot(a, b)</CELL><CELL>Returns the dot product of two vectors a and b.</CELL></FUNCTION><FUNCTION><CELL>exp</CELL><CELL>exp(x)</CELL><CELL>Returns the base-e exponent ex.</CELL></FUNCTION><FUNCTION><CELL>exp2</CELL><CELL>value exp2(value a)</CELL><CELL>Base 2 Exp	(per component).</CELL></FUNCTION><FUNCTION><CELL>faceforward</CELL><CELL>faceforward(n, i, ng)</CELL><CELL>Returns -n * sign(dot(i, ng)).</CELL></FUNCTION><FUNCTION><CELL>floor</CELL><CELL>floor(x)</CELL><CELL>Returns the greatest integer which is less than or equal to x.</CELL></FUNCTION><FUNCTION><CELL>fmod</CELL><CELL>fmod(a, b)</CELL><CELL>Returns the floating point remainder f of a / b such that a = i * b + f, where i is an integer, f has the same sign as x, and the absolute value of f is less than the absolute value of b.</CELL></FUNCTION><FUNCTION><CELL>frac</CELL><CELL>frac(x)</CELL><CELL>Returns the fractional part f of x, such that f is a value greater than or equal to 0, and less than 1.</CELL></FUNCTION><FUNCTION><CELL>frc</CELL><CELL>value frc(value a)</CELL><CELL>Fractional part	(per component).</CELL></FUNCTION><FUNCTION><CELL>frexp</CELL><CELL>frexp(x, out exp)</CELL><CELL>Returns the mantissa and exponent of x. frexp returns the mantissa, and the exponent is stored in the output parameter exp. If x is 0, the function returns 0 for both the mantissa and the exponent.</CELL></FUNCTION><FUNCTION><CELL>fwidth</CELL><CELL>fwidth(x)</CELL><CELL>Returns abs(ddx(x))+abs(ddy(x)).</CELL></FUNCTION><FUNCTION><CELL>isfinite</CELL><CELL>isfinite(x)</CELL><CELL>Returns true if x is finite, false otherwise.</CELL></FUNCTION><FUNCTION><CELL>isinf</CELL><CELL>isinf(x)</CELL><CELL>Returns true if x is +INF or -INF, false otherwise.</CELL></FUNCTION><FUNCTION><CELL>isnan</CELL><CELL>isnan(x)</CELL><CELL>Returns true if x is NAN or QNAN, false otherwise.</CELL></FUNCTION><FUNCTION><CELL>ldexp</CELL><CELL>ldexp(x, exp)</CELL><CELL>Returns x * 2exp.</CELL></FUNCTION><FUNCTION><CELL>len</CELL><CELL>float len(value a)</CELL><CELL>Vector length.</CELL></FUNCTION><FUNCTION><CELL>length</CELL><CELL>length(v)</CELL><CELL>Returns the length of the vector v.</CELL></FUNCTION><FUNCTION><CELL>lerp</CELL><CELL>lerp(a, b, s)</CELL><CELL>Returns a + s(b - a). This linearly interpolates between a and b, such that the return value is a when s is 0, and b when s is 1.</CELL></FUNCTION><FUNCTION><CELL>lit</CELL><CELL>lit(ndotl, ndoth, m)</CELL><CELL>Returns a lighting vector (ambient, diffuse, specular, 1): ambient = 1; diffuse = (ndotl &lt; 0) ? 0 : ndotl; specular = (ndotl &lt; 0) || (ndoth &lt; 0) ? 0 : (ndoth * m);</CELL></FUNCTION><FUNCTION><CELL>log</CELL><CELL>log(x)</CELL><CELL>Returns the base-e logarithm of x.  If x is negative, the function returns indefinite.  If x is 0, the function returns +INF.</CELL></FUNCTION><FUNCTION><CELL>log10</CELL><CELL>log10(x)</CELL><CELL>Returns the base-10 logarithm of x.  If x is negative, the function returns indefinite.  If x is 0, the function returns +INF.</CELL></FUNCTION><FUNCTION><CELL>log2</CELL><CELL>log2(x)</CELL><CELL>Returns the base-2 logarithm of x.  If x is negative, the function returns indefinite.  If x is 0, the function returns +INF.</CELL></FUNCTION><FUNCTION><CELL>max</CELL><CELL>max(a, b)</CELL><CELL>Selects the greater of a and b.</CELL></FUNCTION><FUNCTION><CELL>min</CELL><CELL>min(a, b)</CELL><CELL>Selects the lesser of a and b.</CELL></FUNCTION><FUNCTION><CELL>modf</CELL><CELL>modf(x, out ip)</CELL><CELL>Splits the value x into fractional and integer parts, each of which has the same sign and x. The signed fractional portion of x is returned. The integer portion is stored in the output parameter ip.</CELL></FUNCTION><FUNCTION><CELL>mul</CELL><CELL>mul(a, b)</CELL><CELL>Performs matrix multiplication between a and b. If a is a vector, it treated as a row vector. If b is a vector, it is treated as a column vector. The inner dimension acolumns and brows must be equal. The result has the dimension arows x bcolumns.</CELL></FUNCTION><FUNCTION><CELL>noise</CELL><CELL>noise(x)</CELL><CELL>Not yet implemented.</CELL></FUNCTION><FUNCTION><CELL>normalize</CELL><CELL>normalize(v)</CELL><CELL>Returns the normalized vector v / length(v).  If the length of v is 0, the result is indefinite.</CELL></FUNCTION><FUNCTION><CELL>pow</CELL><CELL>pow(x, y)</CELL><CELL>Returns x^y.</CELL></FUNCTION><FUNCTION><CELL>radians</CELL><CELL>radians(x)</CELL><CELL>Converts x from degrees to radians.</CELL></FUNCTION><FUNCTION><CELL>reflect</CELL><CELL>reflect(i, n)</CELL><CELL>Returns the reflection vector v, given the entering ray direction i, and the surface normal n. Such that v = i - 2 * dot(i, n) * n</CELL></FUNCTION><FUNCTION><CELL>refract</CELL><CELL>refract(i, n, eta)</CELL><CELL>Returns the refraction vector v, given the entering ray direction i, the surface normal n, and the relative index of refraction eta. If the angle between i and n is too great for a given eta, refract returns (0,0,0).</CELL></FUNCTION><FUNCTION><CELL>round</CELL><CELL>round(x)</CELL><CELL>Rounds x to the nearest integer.</CELL></FUNCTION><FUNCTION><CELL>rsqrt</CELL><CELL>rsqrt(x)</CELL><CELL>Returns 1 / sqrt(x).</CELL></FUNCTION><FUNCTION><CELL>saturate</CELL><CELL>saturate(x)</CELL><CELL>Clamps x to the range [0, 1].</CELL></FUNCTION><FUNCTION><CELL>sign</CELL><CELL>sign(x)</CELL><CELL>Computes the sign of x.  Returns -1 if x is less than 0, 0 if x equals 0, and 1 if x is greater than zero.</CELL></FUNCTION><FUNCTION><CELL>sin</CELL><CELL>sin(x)</CELL><CELL>Returns the sine of x.</CELL></FUNCTION><FUNCTION><CELL>sincos</CELL><CELL>sincos(x, out s, out c)</CELL><CELL>Returns the sine and cosine of x.  sin(x) is stored in the output parameter s.  cos(x) is stored in the output parameter c.</CELL></FUNCTION><FUNCTION><CELL>sinh</CELL><CELL>sinh(x)</CELL><CELL>Returns the hyperbolic sine of x.</CELL></FUNCTION><FUNCTION><CELL>smoothstep</CELL><CELL>smoothstep(min, max, x)</CELL><CELL>Returns 0 if x &lt; min. Returns 1 if x &gt; max. Returns a smooth Hermite interpolation between 0 and 1, if x is in the range [min, max].</CELL></FUNCTION><FUNCTION><CELL>sqrt</CELL><CELL>value sqrt(value a)</CELL><CELL>Square root	(per component).</CELL></FUNCTION><FUNCTION><CELL>step</CELL><CELL>step(a, x)</CELL><CELL>Returns (x &gt;= a) ? 1 : 0.</CELL></FUNCTION><FUNCTION><CELL>tan</CELL><CELL>tan(x)	</CELL><CELL>Returns the tangent of x.</CELL></FUNCTION><FUNCTION><CELL>tanh</CELL><CELL>tanh(x)</CELL><CELL>Returns the hyperbolic tangent of x.</CELL></FUNCTION><FUNCTION><CELL>tex1D</CELL><CELL>tex1D(s, t)</CELL><CELL>1-D texture lookup.  s is a sampler or a sampler1D object.  t is a scalar.</CELL></FUNCTION><FUNCTION><CELL>tex1D</CELL><CELL>tex1D(s, t, ddx, ddy)</CELL><CELL>1-D texture lookup, with derivatives.  s is a sampler or sampler1D object.  t, ddx, and ddy are scalars.</CELL></FUNCTION><FUNCTION><CELL>tex1Dproj</CELL><CELL>tex1Dproj(s, t)</CELL><CELL>1-D projective texture lookup. s is a sampler or sampler1D object. t is a 4-D vector. t is divided by its last component before the lookup takes place.</CELL></FUNCTION><FUNCTION><CELL>tex1Dbias</CELL><CELL>tex1Dbias(s, t)</CELL><CELL>1-D biased texture lookup. s is a sampler or sampler1D object. t is a 4-D vector. The mip level is biased by t.w before the lookup takes place.</CELL></FUNCTION><FUNCTION><CELL>tex2D</CELL><CELL>tex2D(s, t)</CELL><CELL>2-D texture lookup.  s is a sampler or a sampler2D object.  t is a 2-D texture coordinate.</CELL></FUNCTION><FUNCTION><CELL>tex2D</CELL><CELL>tex2D(s, t, ddx, ddy)</CELL><CELL>2-D texture lookup, with derivatives.  s is a sampler or sampler2D object.  t, ddx, and ddy are 2-D vectors.</CELL></FUNCTION><FUNCTION><CELL>tex2Dproj</CELL><CELL>tex2Dproj(s, t)</CELL><CELL>2-D projective texture lookup. s is a sampler or sampler2D object. t is a 4-D vector. t is divided by its last component before the lookup takes place.</CELL></FUNCTION><FUNCTION><CELL>tex2Dbias</CELL><CELL>tex2Dbias(s, t)</CELL><CELL>2-D biased texture lookup. s is a sampler or sampler2D object. t is a 4-D vector. The mip level is biased by t.w before the lookup takes place.</CELL></FUNCTION><FUNCTION><CELL>tex3D</CELL><CELL>tex3D(s, t)</CELL><CELL>3-D volume texture lookup.  s is a sampler or a sampler3D object.  t is a 3-D texture coordinate.</CELL></FUNCTION><FUNCTION><CELL>tex3D</CELL><CELL>tex3D(s, t, ddx, ddy)</CELL><CELL>3-D volume texture lookup, with derivatives.  s is a sampler or sampler3D object.  t, ddx, and ddy are 3-D vectors.</CELL></FUNCTION><FUNCTION><CELL>tex3Dproj</CELL><CELL>tex3Dproj(s, t)</CELL><CELL>3-D projective volume texture lookup. s is a sampler or sampler3D object. t is a 4-D vector. t is divided by its last component before the lookup takes place.</CELL></FUNCTION><FUNCTION><CELL>tex3Dbias</CELL><CELL>tex3Dbias(s, t)</CELL><CELL>3-D biased texture lookup. s is a sampler or sampler3D object. t is a 4-D vector. The mip level is biased by t.w before the lookup takes place.</CELL></FUNCTION><FUNCTION><CELL>texCUBE</CELL><CELL>texCUBE(s, t)</CELL><CELL>3-D cube texture lookup.  s is a sampler or a samplerCUBE object.  t is a 3-D texture coordinate.</CELL></FUNCTION><FUNCTION><CELL>texCUBE</CELL><CELL>texCUBE(s, t, ddx, ddy)</CELL><CELL>3-D cube texture lookup, with derivatives.  s is a sampler or samplerCUBE object.  t, ddx, and ddy are 3-D vectors.</CELL></FUNCTION><FUNCTION><CELL>texCUBEproj</CELL><CELL>texCUBEproj(s, t)</CELL><CELL>3-D projective cube texture lookup. s is a sampler or samplerCUBE object. t is a 4-D vector. t is divided by its last component before the lookup takes place.</CELL></FUNCTION><FUNCTION><CELL>texCUBEbias</CELL><CELL>texCUBEbias(s, t)</CELL><CELL>3-D biased cube texture lookup. s is a sampler or samplerCUBE object. t is a 4-dimensional vector. The mip level is biased by t.w before the lookup takes place. </CELL></FUNCTION><FUNCTION><CELL>transpose</CELL><CELL>transpose(m)</CELL><CELL>Returns the transpose of the matrix m.  If the source is dimension mrows x mcolumns, the result is dimension mcolumns x mrows.</CELL></FUNCTION></FUNCTIONREFERENCE> </UniHighlighter>